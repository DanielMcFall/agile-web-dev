doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    meta(name='description', content='')
    meta(name='author', content='')
    // favicon
    link(rel='shortcut icon', href='images/favicon.ico')
    title Fitness Friends
    // Google Fonts
    link(href='https://fonts.googleapis.com/css?family=Ubuntu:500,700', rel='stylesheet')
    link(href='https://fonts.googleapis.com/css?family=Roboto:300,400', rel='stylesheet')
    // Fonts for icons
    link(href='css/font-awesome.min.css', rel='stylesheet')
    // bootstrap
    link(href='css/bootstrap.css', rel='stylesheet')
    // Styles CSS
    link(href='css/style.css', rel='stylesheet')
    // HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries
    //if lt IE 9
      script(src='https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js')
      script(src='https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js')
  body
    #main-content.m-scene
      // Header
      nav.navbar
        .full-width-container
          a.navbar-brand(href='index.html')
            img(src='images/logo.png', width='400', height='45', alt='Logo')
          .fullscreen-menu-holder
            .d-flex.align-items-center
              ul.sidebar-menu
                li
                  a(href='/') Home
                li
                  a(href='/match') My Matches
                li
                  a(href='/about') About Website
                li
                  a(href='/algorithm') Matching Algorithm
                li
                  a(href='/testing') Testing
          button.hamburger-menu-btn.pull-right.for-fullscreen.hamburger-circle
            span toggle menu
          .pull-right
            a.top_link(href='/register') Register
            a.top_link(href='#login') Login
          #login.overlay
            .popup
              .popover-title.popup_header
                h2.text-center Login
              a.close(href='#') ×
              .content
                form.login_form(role='form', action="/login", method="post")
                  .col-sm-12.col-xs-12.mb-3
                    input(type='email', name='email', placeholder='Email')
                  .col-sm-12.col-xs-12
                    input(type='password', name='password', placeholder='Password')
                  .pull-right.pop_btn
                    button.top_link(type="submit") Login
      // End Header
      .page-container
        // Banner
        .inner_banner.about_img
        // End Banner
        // About content
        .container
          .mt_60.mb_60
            .row
              .col-md-12
                span.reveal-title About
                h2 Fitness Friends
                .separator
                p.lead
                  span.orange Find your perfect fitness friend today for free!
                  br
                  | With over two million members, we are the largest community of fitness-minded individuals on the web. As a member you can search by fitness categories, share photos, and let potential matches know you’re interested — all for free. So, don’t wait. Join now!
          .mt_60.mb_60
            .row
              .col-md-12
                h2 Web Development
                .separator
                #accordion.accordion(role='tablist', aria-multiselectable='true')
                  .card.border-0
                    #headingOne.card-header(role='tab')
                      h5.mb-0
                        a(data-toggle='collapse', data-parent='#accordion', href='#collapseOne', aria-expanded='true', aria-controls='collapseOne')
                          | Architecture
                    #collapseOne.collapse.show(role='tabpanel', aria-labelledby='headingOne')
                      .card-block
                        p.lead The site is designed as a node.js web app and is centered around a Model-view-controller architecture. Routes/index.js responds to HTTP requests by calling
                          | an appropriate function in the controllers. There are two models: one for user accounts and another for conversations between users.

                  .card.border-0
                    #headingTwo.card-header(role='tab')
                      h5.mb-0
                        a.collapsed(data-toggle='collapse', data-parent='#accordion', href='#collapseTwo', aria-expanded='false', aria-controls='collapseTwo')
                          | Design Choices
                    #collapseTwo.collapse(role='tabpanel', aria-labelledby='headingTwo')
                      .card-block
                        p.lead
                          span.orange Login & Authorization
                          br
                          | This is handled with passport-local-mongoose. An Account schema defines the user fields with email as unique and password being salted/hashed.
                          | passport-local-mongoose also handles login sessions: user data is passed through index.js as req.user which distributes this information to the controller
                          | or frontend as necessary. There is a logout request which terminates the session.

                          | This decision was chosen because it encapsulates and simplifies the entire authorization process. Handling sessions and salting/hashing with just
                          | vanilla passport would not reap a lot of benefit considering the additional complexity and limited project timeframe.

                          | Some difficulties were introduced when trying to add facebook authentication/signup. This was due to a combination of OAuth errors on the facebook end
                          | and issues with the Account schema on the passport-local end.
                          br

                        p.lead
                          span.orange Views
                          br
                          | The app uses jade as a view engine. The controller specifies which template to render. User information and other javascript objects are sent to
                          | the template to dynamically render certain information (for example: lists of conversations, lists of matches). Jade is also used in some cases to check
                          | if variables are present and show defaults if they are not (for example: default pictures if the user does not have a custom picture, or custom message
                          | if the user is not a part of any conversations)

                          | Jade is a powerful and commonly used standard that synergizes well with MEAN stack. It was an obvious choice for the project criteria.
                          br

                        p.lead
                          span.orange Database
                          br
                          | A mongodb database is implemented which is hosted on mlab. The database is enforced by two mongoose schemas. Again, Mongodb is an integral part of
                          | the MEAN stack and was easily the most suitable option.

                          | There were a lot of difficulties with mongodb. None of our members had knowledge of how to form queries and so a lot of knowledge was built from
                          | scratch - trial and error. The project required a huge variety of different queries for different scenarios (Model update/find, database find/update, matching algorithm
                          | etc). Eventually there was success - even for more complicated queries involving nested arrays of objects and nested $or/$and operators.

                          | The huge advantage of using mongodb was being able to directly retrieve js objects from queries as well as update quickly on the fly.

                          | Unfortunately, the database is not really designed to store pictures. In a normal situation, pictures or other binary data would be stored on a cloud
                          | server or regular filesystem and retrieved from there, rather than being stored inside the database. Due to the cost of external server solutions though,
                          | we stored the object in the db and used a temporary reference url to get a http request that could respond with the file in base64 format. Success!
                          | but not ideal. Extra requests like this caused page requests to take a long time (especially for larger files and especially because of the budget mlab db)
                          br

                        p.lead
                          span.orange Geolocation matching and algorithm
                          br
                          | We used Google Maps javascrip API to fetch user's current location and save it into the database. We also used geolib npm package to get distance between two co-ordinates and find the nearby matches.

                          | To find user's within a range, we used geolib getDistance() function and used it to calculate the distance between two points for each of the entry in the database.

                          | There was some difficulty in ensuring everyone had a valid location if they chose not to reveal their location in register. The algorithm tries to accomodate for this.
                          br

                        p.lead
                          span.orange Live chat
                          br
                          | Chat is implemented using socket IO to emit realtime messages between users that share a conversation ID.

                          | Users browse matches based on their preferences, profile and location. If they like a match, they can initiate a conversation.
                          | This creates a conversation id and directs the user to the messages page which shows on the left a list of conversations and in the middle a chat window.

                          | On load, an active conversation is loaded into the chat window. Clicking on any of the chats will change the active chat id and reload the messages.
                          | All messages are emitted via a socket to the recipient.

                          | There were a lot of difficulties with the chat system due to the complexity of the queries and amount of DOM manipulation required to generate messages over
                          | different active chat windows.

                  .card.border-0
                    #headingThree2.card-header(role='tab')
                      h5.mb-0
                        a.collapsed(data-toggle='collapse', data-parent='#accordion', href='#collapseThree', aria-expanded='false', aria-controls='collapseThree')
                          | Difficulties
                    #collapseThree.collapse(role='tabpanel', aria-labelledby='headingThree2')
                      .card-block
                        p.lead described above
        // End About content
      // Footer
      footer.bg-orange.mt_150.whole-container-text-white
        | Copyright 2017 © University of Western Australia
      // End Footer
    // Placed js files at the end of the document so the pages load faster
    script(type='text/javascript', src='js/jquery.min.js')
    script(src='js/jquery.validate.js')
    script(src='js/bootstrap.min.js ')
    script(type='text/javascript', src='js/owl.carousel.js')
    script(type='text/javascript', src='js/main.js')
    script(type='text/javascript').
      $(document).ready(function(){
      var current = 1;
      widget      = $(".step");
      btnnext     = $(".next");
      btnback     = $(".back");
      btnsubmit   = $(".submit");
      // Init buttons and UI
      widget.not(':eq(0)').hide();
      hideButtons(current);
      setProgress(current);
      // Next button click action
      btnnext.click(function(){
      if(current < widget.length){
      // Check validation
      if($(".form").valid()){
      widget.show();
      widget.not(':eq('+(current++)+')').hide();
      setProgress(current);
      }
      }
      hideButtons(current);
      })
      // Back button click action
      btnback.click(function(){
      if(current > 1){
      current = current - 2;
      if(current < widget.length){
      widget.show();
      widget.not(':eq('+(current++)+')').hide();
      setProgress(current);
      }
      }
      hideButtons(current);
      })
      $('.form').validate({ // initialize plugin
      ignore:":not(:visible)",
      rules: {
      name     : "required",
      email    : {required : true, email:true},
      country  : "required",
      username : "required",
      password : "required",
      rpassword: { required : true, equalTo: "#password"},
      },
      });
      });
      // Change progress bar action
      setProgress = function(currstep){
      var percent = parseFloat(100 / widget.length) * currstep;
      percent = percent.toFixed();
      $(".progress-bar").css("width",percent+"%").html(percent+"%");
      }
      // Hide buttons according to the current step
      hideButtons = function(current){
      var limit = parseInt(widget.length);
      $(".action").hide();
      if(current < limit) btnnext.show();
      if(current > 1) btnback.show();
      if (current == limit) {
      // Show entered values
      $(".display label:not(.control-label)").each(function(){
      console.log($(this).find("label:not(.control-label)").html($("#"+$(this).data("id")).val()));
      });
      btnnext.hide();
      btnsubmit.show();
      }
      }
